/*
 * Copyright 2015 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
ext.versionMajor = 1; ext.versionMinor = 4; ext.versionPatch = 0;
ext.jenkinsBuildNumber = Integer.valueOf(System.env.BUILD_NUMBER ?: 0)
android {
    buildToolsVersion "25.0.0"
    compileSdkVersion 25

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "com.google.samples.apps.topeka"
        minSdkVersion 14
        targetSdkVersion 25
        versionName computeVersionName()
        versionCode computeVersionCode()
        //versionCode 1
        //versionName "1.0"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    
    signingConfigs {
        debug {
          // Override the local debug keystore, so that APKs built by
          // any developer, or by Jenkins can be installed on any device
          //keytool -genkey -v -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US" -keystore debug.keystore -storepass android -alias androiddebugkey -keypass android
          storeFile file('../debug.keystore')
        }
    }

    buildTypes {
        release {
            minifyEnabled true
        }
        internal {
          // For internal builds, use an app ID separate from release builds
          applicationIdSuffix '.dogfood'
          // Include the Jenkins build number in the displayed version name
          versionNameSuffix " (build ${jenkinsBuildNumber})"
          // Sign with the common debug key
          signingConfig signingConfigs.debug
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

ext {
    jenkinsBuildNumber = "Integer.valueOf(System.env.BUILD_NUMBER ?: 0)"
    versionMajor = "1"
    versionMinor = "4"
    versionPatch = "0"
    supportLibVersion = "25.0.0"
    espressoVersion = "2.2.2"
    androidTestVersion = "0.5"
    hamcrestVersion = "1.3"
    junitVersion = "4.12"
}

dependencies {
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support.test.espresso:espresso-idling-resource:${espressoVersion}"
    testCompile "junit:junit:${junitVersion}"

    androidTestCompile("com.android.support.test.espresso:espresso-core:${espressoVersion}") {
        exclude module: "espresso-idling-resource"
        exclude group: "com.android.support"
    }
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:${espressoVersion}") {
        exclude module: "espresso-core"
        exclude module: "recyclerview-v7"
        exclude group: "com.android.support"
    }
    androidTestCompile("com.android.support.test:rules:${androidTestVersion}") {
        exclude group: "com.android.support"
    }

    androidTestCompile("com.android.support.test:runner:${androidTestVersion}") {
        exclude group: "com.android.support"
    }

    androidTestCompile "org.hamcrest:hamcrest-core:${hamcrestVersion}"
}

// Returns name based on version values, e.g. ‘1.4.0’
def computeVersionName() {
 return "${versionMajor}.${versionMinor}.${versionPatch}"
}
// Returns auto-incrementing value, e.g. 140017, for Jenkins build #17
def computeVersionCode() {
 return (versionMajor * 100_000) + (versionMinor * 10_000) +
        (versionPatch * 1_000) + jenkinsBuildNumber
}
